Create a Dockerfile in your Django project directory.
# Use official Python image
FROM python:3.13

# Set working directory inside container
WORKDIR /app

# Copy project files into the container
COPY . .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Collect static files (if applicable)
RUN python manage.py collectstatic --noinput

# Expose the port Django will run on
EXPOSE 8000

# Run Django application
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]



Step 2: Create Dockerfile for PostgreSQL
Create another Dockerfile in a new postgres/ directory.
# Use official PostgreSQL image
FROM postgres:16

# Set environment variables
ENV POSTGRES_USER=postgres_user
ENV POSTGRES_PASSWORD=postgres_password
ENV POSTGRES_DB=postgres_db

# Expose PostgreSQL default port
EXPOSE 5432



Step 3: Create docker-compose.yml
This file helps you run Django + PostgreSQL containers together.
version: '3.8'

services:
  db:
    build: ./postgres
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  web:
    build: .
    container_name: django_container
    depends_on:
      - db
    environment:
      DATABASE_NAME: postgres_db
      DATABASE_USER: postgres_user
      DATABASE_PASSWORD: postgres_password
      DATABASE_HOST: db
      DATABASE_PORT: 5432
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

volumes:
  pgdata:



Step 4: Update Django settings.py
Modify the DATABASES configuration to connect with PostgreSQL in Docker.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DATABASE_NAME', 'postgres_db'),
        'USER': os.environ.get('DATABASE_USER', 'postgres_user'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres_password'),
        'HOST': os.environ.get('DATABASE_HOST', 'db'),
        'PORT': os.environ.get('DATABASE_PORT', '5432'),
    }
}



Step 5: Build and Run Containers
1. Build images:
docker-compose build


2. Start containers:
docker-compose up -d


3. View running containers:
docker ps


4. Verify PostgreSQL connection:
Enter the PostgreSQL container and check:
docker exec -it postgres_container psql -U postgres_user -d postgres_db


5. Run database migrations:
docker exec -it django_container python manage.py migrate



Step 6: Access Django App
Once the containers are up, open Django in a browser:
http://localhost:8001



Step 7: Stop and Remove Containers (If Needed)
Stop running containers:
docker-compose down


Remove all containers & images:
docker system prune -a








==========================
Step 1: Create a Google Cloud Free Tier Account
1️⃣ Go to Google Cloud → Sign up here
2️⃣ Sign in with Gmail → If you don’t have an account, create one.
3️⃣ Click "Start Free" → Google offers $300 free credits for new users.
4️⃣ Enter Billing Details → A credit card is required, but you won’t be charged unless you upgrade.
5️⃣ Complete Setup → Your free-tier account is now ready!

Step 2: Set Up a Virtual Machine (VM)
1️⃣ Go to Google Cloud Console → Compute Engine
2️⃣ Create a new VM instance:
- Choose Ubuntu 22.04 as the OS.
- Select e2-micro (Free Tier eligible).
- Allow HTTP & HTTPS traffic. 3️⃣ Click "Create" → Your VM is now running.

Step 3: Install Docker on the VM
1️⃣ SSH into the VM:
gcloud compute ssh <your-instance-name> --zone <your-zone>


2️⃣ Update packages:
sudo apt update && sudo apt upgrade -y


3️⃣ Install Docker:
sudo apt install docker.io -y


4️⃣ Verify installation:
docker --version



Step 4: Clone Your Django Project from GitHub
1️⃣ Install Git:
sudo apt install git -y


2️⃣ Clone your repository:
git clone https://github.com/your-username/your-repo.git


3️⃣ Navigate to the project folder:
cd your-repo



Step 5: Build and Run Your Docker Image
1️⃣ Build the Docker image:
docker build -t django-app .


2️⃣ Run the container:
docker run -d -p 8000:8000 django-app


3️⃣ Check running containers:
docker ps



Step 6: Set Up PostgreSQL in Docker
1️⃣ Pull PostgreSQL image:
docker pull postgres


2️⃣ Run PostgreSQL container:
docker run -d --name postgres-db -e POSTGRES_USER=youruser -e POSTGRES_PASSWORD=yourpassword -e POSTGRES_DB=yourdb -p 5432:5432 postgres


3️⃣ Update Django settings.py:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'yourdb',
        'USER': 'youruser',
        'PASSWORD': 'yourpassword',
        'HOST': 'postgres-db',
        'PORT': '5432',
    }
}



Step 7: Expose Your Django App
1️⃣ Allow traffic on port 8000:
sudo ufw allow 8000


2️⃣ Access your app:
http://<your-vm-external-ip>:8000



Step 8: Automate Deployment with Docker Compose
1️⃣ Create docker-compose.yml:
version: '3.8'

services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: yourdb
    ports:
      - "5432:5432"

  web:
    build: .
    depends_on:
      - db
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"


2️⃣ Run everything:
docker-compose up -d
